# -*- coding: utf-8 -*-

"""
maxioadvancedbillingformerlychargifyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from maxioadvancedbillingformerlychargifyapi.utilities.union_type_lookup import UnionTypeLookUp
from maxioadvancedbillingformerlychargifyapi.api_helper import APIHelper


class ComponentsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(ComponentsControllerTests, cls).setUpClass()
        cls.controller = cls.client.components
        cls.response_catcher = cls.controller.http_call_back

    # This request will return a list of components for a site.
    def test_list_components(self):
        # Parameters for the API call
        date_field = 'updated_at'
        start_date = None
        end_date = None
        start_datetime = None
        end_datetime = None
        include_archived = None
        page = 1
        per_page = 20
        filter_ids = APIHelper.json_deserialize('["1","2","3"]')
        filter_use_site_exchange_rate = True

        # Perform the API call through the SDK function
        result = self.controller.list_components(date_field, start_date, end_date, start_datetime, end_datetime, include_archived, page, per_page, filter_ids, filter_use_site_exchange_rate)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"component":{"id":399850,"name":"$1.00 component","pricing_schem'
            'e":"per_unit","unit_name":"Component","unit_price":"1.0","product_'
            'family_id":997233,"price_per_unit_in_cents":null,"kind":"quantity_'
            'based_component","archived":false,"taxable":false,"description":"C'
            'omponent","default_price_point_id":121000,"prices":[{"id":630687,"'
            'component_id":399850,"starting_quantity":1,"ending_quantity":null,'
            '"unit_price":"1.0","price_point_id":121000,"formatted_unit_price":'
            '"$1.00"}],"price_point_count":2,"price_points_url":"https://genera'
            'l-goods.chargify.com/components/399850/price_points","tax_code":nu'
            'll,"recurring":true,"upgrade_charge":null,"downgrade_credit":null,'
            '"created_at":"2019-08-01T09:35:38-04:00","default_price_point_name'
            '":"Original","product_family_name":"Chargify","use_site_exchange_r'
            'ate":true}},{"component":{"id":399853,"name":"Annual Support Servi'
            'ces","pricing_scheme":null,"unit_name":"on/off","unit_price":"100.'
            '0","product_family_id":997233,"price_per_unit_in_cents":null,"kind'
            '":"on_off_component","archived":false,"taxable":true,"description"'
            ':"Prepay for support services","default_price_point_id":121003,"pr'
            'ice_point_count":4,"price_points_url":"https://general-goods.charg'
            'ify.com/components/399853/price_points","tax_code":"D0000000","rec'
            'urring":true,"upgrade_charge":null,"downgrade_credit":null,"create'
            'd_at":"2019-08-01T09:35:37-04:00","default_price_point_name":"Orig'
            'inal","product_family_name":"Chargify","use_site_exchange_rate":tr'
            'ue}},{"component":{"id":386937,"name":"Cancellation fee","pricing_'
            'scheme":null,"unit_name":"on/off","unit_price":"35.0","product_fam'
            'ily_id":997233,"price_per_unit_in_cents":null,"kind":"on_off_compo'
            'nent","archived":false,"taxable":false,"description":"","default_p'
            'rice_point_id":108307,"price_point_count":1,"price_points_url":"ht'
            'tps://general-goods.chargify.com/components/386937/price_points","'
            'tax_code":null,"recurring":true,"upgrade_charge":null,"downgrade_c'
            'redit":null,"created_at":"2019-08-01T09:35:38-04:00","default_pric'
            'e_point_name":"Original","product_family_name":"Chargify","use_sit'
            'e_exchange_rate":true}}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This method allows to retrieve a list of Components Price Points belonging to a Site.
    def test_list_all_component_price_points(self):
        # Parameters for the API call
        filter_date_field = 'updated_at'
        filter_end_date = None
        filter_end_datetime = None
        include = 'currency_prices'
        page = 1
        per_page = 20
        filter_start_date = None
        filter_start_datetime = None
        filter_type = APIHelper.json_deserialize('["catalog","default"]')
        direction = None
        filter_ids = APIHelper.json_deserialize('[1,2,3]')
        filter_archived_at = 'not_null'

        # Perform the API call through the SDK function
        result = self.controller.list_all_component_price_points(filter_date_field, filter_end_date, filter_end_datetime, include, page, per_page, filter_start_date, filter_start_datetime, filter_type, direction, filter_ids, filter_archived_at)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"price_points":[{"price_point":{"id":1,"name":"Auto-created","typ'
            'e":"default","component_id":2,"handle":"auto-created","created_at"'
            ':"2021-02-21T11:05:57-05:00","updated_at":"2021-02-21T11:05:57-05:'
            '00","prices":[{"id":3,"component_id":2,"starting_quantity":0,"endi'
            'ng_quantity":null,"unit_price":"1.0","price_point_id":1,"formatted'
            '_unit_price":"$1.00","segment_id":null}]}}]}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

