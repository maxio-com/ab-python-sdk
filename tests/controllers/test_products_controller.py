# -*- coding: utf-8 -*-

"""
maxioadvancedbillingformerlychargifyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from maxioadvancedbillingformerlychargifyapi.api_helper import APIHelper


class ProductsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(ProductsControllerTests, cls).setUpClass()
        cls.controller = cls.client.products
        cls.response_catcher = cls.controller.http_call_back

    # This method allows to retrieve a list of Products belonging to a Site.
    def test_list_products(self):
        # Parameters for the API call
        date_field = 'updated_at'
        end_date = None
        end_datetime = None
        start_date = None
        start_datetime = None
        page = 1
        per_page = 20
        include_archived = True
        include = 'prepaid_product_price_point'
        filter_prepaid_product_price_point_product_price_point_id = 'not_null'
        filter_use_site_exchange_rate = True

        # Perform the API call through the SDK function
        result = self.controller.list_products(date_field, end_date, end_datetime, start_date, start_datetime, page, per_page, include_archived, include, filter_prepaid_product_price_point_product_price_point_id, filter_use_site_exchange_rate)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"product":{"id":0,"name":"string","handle":"string","description'
            '":"string","accounting_code":"string","request_credit_card":true,"'
            'expiration_interval":0,"expiration_interval_unit":"month","created'
            '_at":"string","updated_at":"string","price_in_cents":0,"interval":'
            '0,"interval_unit":"month","initial_charge_in_cents":0,"trial_price'
            '_in_cents":0,"trial_interval":0,"trial_interval_unit":"month","arc'
            'hived_at":"string","require_credit_card":true,"return_params":"str'
            'ing","taxable":true,"update_return_url":"string","initial_charge_a'
            'fter_trial":true,"version_number":0,"update_return_params":"string'
            '","product_family":{"id":0,"name":"string","handle":"string","acco'
            'unting_code":null,"description":"string","created_at":"string","up'
            'dated_at":"string"},"public_signup_pages":[{"id":0,"return_url":"s'
            'tring","return_params":"string","url":"string"}],"product_price_po'
            'int_name":"string","request_billing_address":true,"require_billing'
            '_address":true,"require_shipping_address":true,"use_site_exchange_'
            'rate":true,"tax_code":"string","default_product_price_point_id":0}'
            '}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

