# -*- coding: utf-8 -*-

"""
maxioadvancedbillingformerlychargifyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from maxioadvancedbillingformerlychargifyapi.api_helper import APIHelper
from maxioadvancedbillingformerlychargifyapi.models.subscription_group_signup_request import SubscriptionGroupSignupRequest
from maxioadvancedbillingformerlychargifyapi.models.create_subscription_group_request import CreateSubscriptionGroupRequest


class SubscriptionGroupsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(SubscriptionGroupsControllerTests, cls).setUpClass()
        cls.controller = cls.client.subscription_groups
        cls.response_catcher = cls.controller.http_call_back

    # Create multiple subscriptions at once under the same customer and consolidate them into a subscription group.
    #
    #You must provide one and only one of the `payer_id`/`payer_reference`/`payer_attributes` for the customer attached to the group.
    #
    #You must provide one and only one of the `payment_profile_id`/`credit_card_attributes`/`bank_account_attributes` for the payment profile attached to the group.
    #
    #Only one of the `subscriptions` can have `"primary": true` attribute set.
    #
    #When passing product to a subscription you can use either `product_id` or `product_handle` or `offer_id`. You can also use `custom_price` instead.
    def test_signup_with_subscription_group(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"subscription_group":{"payment_profile_id":123,"payer_id":123,"su'
            'bscriptions":[{"product_id":11,"primary":true},{"product_id":12},{'
            '"product_id":13}]}}', SubscriptionGroupSignupRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.signup_with_subscription_group(body)

        # Test response code
        assert self.response_catcher.response.status_code == 201

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Creates a subscription group with given members.
    def test_create_subscription_group(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"subscription_group":{"subscription_id":1,"member_ids":[2,3,4]}}', CreateSubscriptionGroupRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_subscription_group(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"subscription_group":{"customer_id":1,"payment_profile":{"id":1,"'
            'first_name":"t","last_name":"t","masked_card_number":"XXXX-XXXX-XX'
            'XX-1"},"payment_collection_method":"automatic","subscription_ids":'
            '[1,2],"created_at":"2021-01-21T05:47:38-05:00"}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # Returns an array of subscription groups for the site. The response is paginated and will return a `meta` key with pagination information.
    #
    ##### Account Balance Information
    #
    #Account balance information for the subscription groups is not returned by default. If this information is desired, the `include[]=account_balances` parameter must be provided with the request.
    def test_list_subscription_groups(self):
        # Parameters for the API call
        page = 1
        per_page = 20
        include = None

        # Perform the API call through the SDK function
        result = self.controller.list_subscription_groups(page, per_page, include)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"subscription_groups":[{"uid":"grp_952mvqcnk53wq","scheme":1,"cus'
            'tomer_id":88498000,"payment_profile_id":93063018,"subscription_ids'
            '":[42768907,82370782],"primary_subscription_id":69844395,"next_ass'
            'essment_at":"Sun, 09 Aug 2020 15:59:06 EDT -04:00","state":"active'
            '","cancel_at_end_of_period":false,"account_balances":{"prepayments'
            '":{"balance_in_cents":0},"service_credits":{"balance_in_cents":0},'
            '"pending_discounts":{"balance_in_cents":0}}}],"meta":{"current_pag'
            'e":1,"total_count":1}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

