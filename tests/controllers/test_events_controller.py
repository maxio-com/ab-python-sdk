# -*- coding: utf-8 -*-

"""
maxioadvancedbillingformerlychargifyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from maxioadvancedbillingformerlychargifyapi.api_helper import APIHelper


class EventsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(EventsControllerTests, cls).setUpClass()
        cls.controller = cls.client.events
        cls.response_catcher = cls.controller.http_call_back

    # ## Events Intro
    #
    #Chargify Events include various activity that happens around a Site. This information is **especially** useful to track down issues that arise when subscriptions are not created due to errors.
    #
    #Within the Chargify UI, "Events" are referred to as "Site Activity".  Full documentation on how to record view Events / Site Activty in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407864698139).
    #
    ### List Events for a Site
    #
    #This method will retrieve a list of events for a site. Use query string filters to narrow down results. You may use the `key` filter as part of your query string to narrow down results.
    #
    #### Legacy Filters
    #
    #The following keys are no longer supported.
    #
    #+ `payment_failure_recreated`
    #+ `payment_success_recreated`
    #+ `renewal_failure_recreated`
    #+ `renewal_success_recreated`
    #+ `zferral_revenue_post_failure` - (Specific to the deprecated Zferral integration)
    #+ `zferral_revenue_post_success` - (Specific to the deprecated Zferral integration)
    #
    ### Event Specific Data
    #
    #Event Specific Data
    #
    #Each event type has its own `event_specific_data` specified.
    #
    #Here’s an example event for the `subscription_product_change` event:
    #
    #```
    #{
    #    "event": {
    #        "id": 351,
    #        "key": "subscription_product_change",
    #        "message": "Product changed on Marky Mark's subscription from 'Basic' to 'Pro'",
    #        "subscription_id": 205,
    #        "event_specific_data": {
    #            "new_product_id": 3,
    #            "previous_product_id": 2
    #        },
    #        "created_at": "2012-01-30T10:43:31-05:00"
    #    }
    #}
    #```
    #
    #Here’s an example event for the `subscription_state_change` event:
    #
    #```
    # {
    #     "event": {
    #         "id": 353,
    #         "key": "subscription_state_change",
    #         "message": "State changed on Marky Mark's subscription to Pro from trialing to active",
    #         "subscription_id": 205,
    #         "event_specific_data": {
    #             "new_subscription_state": "active",
    #             "previous_subscription_state": "trialing"
    #         },
    #         "created_at": "2012-01-30T10:43:33-05:00"
    #     }
    # }
    #```
    def test_list_events(self):
        # Parameters for the API call
        page = 1
        per_page = 20
        since_id = None
        max_id = None
        direction = 'desc'
        filter = APIHelper.json_deserialize('["custom_field_value_change","payment_success"]')
        date_field = 'created_at'
        start_date = None
        end_date = None
        start_datetime = None
        end_datetime = None

        # Perform the API call through the SDK function
        result = self.controller.list_events(page, per_page, since_id, max_id, direction, filter, date_field, start_date, end_date, start_datetime, end_datetime)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('[{"event":{"id":343087780,"key":"subscription_state_change","messa'
            'ge":"State changed on Test subscription to Monthly Product from ac'
            'tive to past_due","subscription_id":14950962,"created_at":"2016-10'
            '-27T16:42:22-04:00","event_specific_data":{"previous_subscription_'
            'state":"active","new_subscription_state":"past_due"}}},{"event":{"'
            'id":343087742,"key":"billing_date_change","message":"Billing date '
            'changed on Test\'s subscription to Monthly Product from 11/27/2016'
            ' to 10/27/2016","subscription_id":14950962,"created_at":"2016-10-2'
            '7T16:42:19-04:00","event_specific_data":null}},{"event":{"id":3430'
            '85267,"key":"statement_closed","message":"Statement 79401838 close'
            'd (but not settled) for Test\'s subscription to ANNUAL product","s'
            'ubscription_id":14950975,"created_at":"2016-10-27T16:40:40-04:00",'
            '"event_specific_data":null}},{"event":{"id":4481,"key":"custom_fie'
            'ld_value_change","message":"Custom field (Extra support included) '
            'changed for Subscription 117 from \'Yes\' to \'No\'.","subscriptio'
            'n_id":117,"customer_id":null,"created_at":"2022-03-24T07:55:06-04:'
            '00","event_specific_data":{"event_type":"updated","metafield_name"'
            ':"Extra support included","metafield_id":2,"old_value":"Yes","new_'
            'value":"No","resource_type":"Subscription","resource_id":117,"prev'
            'ious_subscription_state":"active","new_subscription_state":"past_d'
            'ue"}}}]')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # ## Events Intro
    #
    #Chargify Events include various activity that happens around a Site. This information is **especially** useful to track down issues that arise when subscriptions are not created due to errors.
    #
    #Within the Chargify UI, "Events" are referred to as "Site Activity".  Full documentation on how to record view Events / Site Activty in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407864698139).
    #
    ### List Events for a Site
    #
    #This method will retrieve a list of events for a site. Use query string filters to narrow down results. You may use the `key` filter as part of your query string to narrow down results.
    #
    #### Legacy Filters
    #
    #The following keys are no longer supported.
    #
    #+ `payment_failure_recreated`
    #+ `payment_success_recreated`
    #+ `renewal_failure_recreated`
    #+ `renewal_success_recreated`
    #+ `zferral_revenue_post_failure` - (Specific to the deprecated Zferral integration)
    #+ `zferral_revenue_post_success` - (Specific to the deprecated Zferral integration)
    #
    ### Event Specific Data
    #
    #Event Specific Data
    #
    #Each event type has its own `event_specific_data` specified.
    #
    #Here’s an example event for the `subscription_product_change` event:
    #
    #```
    #{
    #    "event": {
    #        "id": 351,
    #        "key": "subscription_product_change",
    #        "message": "Product changed on Marky Mark's subscription from 'Basic' to 'Pro'",
    #        "subscription_id": 205,
    #        "event_specific_data": {
    #            "new_product_id": 3,
    #            "previous_product_id": 2
    #        },
    #        "created_at": "2012-01-30T10:43:31-05:00"
    #    }
    #}
    #```
    #
    #Here’s an example event for the `subscription_state_change` event:
    #
    #```
    # {
    #     "event": {
    #         "id": 353,
    #         "key": "subscription_state_change",
    #         "message": "State changed on Marky Mark's subscription to Pro from trialing to active",
    #         "subscription_id": 205,
    #         "event_specific_data": {
    #             "new_subscription_state": "active",
    #             "previous_subscription_state": "trialing"
    #         },
    #         "created_at": "2012-01-30T10:43:33-05:00"
    #     }
    # }
    #```
    def test_list_events_1(self):
        # Parameters for the API call
        page = 1
        per_page = 20
        since_id = None
        max_id = None
        direction = 'desc'
        filter = APIHelper.json_deserialize('["custom_field_value_change","payment_success"]')
        date_field = 'created_at'
        start_date = None
        end_date = None
        start_datetime = None
        end_datetime = None

        # Perform the API call through the SDK function
        result = self.controller.list_events(page, per_page, since_id, max_id, direction, filter, date_field, start_date, end_date, start_datetime, end_datetime)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/xml'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # ## Events Intro
    #
    #Chargify Events include various activity that happens around a Site. This information is **especially** useful to track down issues that arise when subscriptions are not created due to errors.
    #
    #Within the Chargify UI, "Events" are referred to as "Site Activity".  Full documentation on how to record view Events / Site Activty in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407864698139).
    #
    ### List Events for a Site
    #
    #This method will retrieve a list of events for a site. Use query string filters to narrow down results. You may use the `key` filter as part of your query string to narrow down results.
    #
    #### Legacy Filters
    #
    #The following keys are no longer supported.
    #
    #+ `payment_failure_recreated`
    #+ `payment_success_recreated`
    #+ `renewal_failure_recreated`
    #+ `renewal_success_recreated`
    #+ `zferral_revenue_post_failure` - (Specific to the deprecated Zferral integration)
    #+ `zferral_revenue_post_success` - (Specific to the deprecated Zferral integration)
    #
    ### Event Specific Data
    #
    #Event Specific Data
    #
    #Each event type has its own `event_specific_data` specified.
    #
    #Here’s an example event for the `subscription_product_change` event:
    #
    #```
    #{
    #    "event": {
    #        "id": 351,
    #        "key": "subscription_product_change",
    #        "message": "Product changed on Marky Mark's subscription from 'Basic' to 'Pro'",
    #        "subscription_id": 205,
    #        "event_specific_data": {
    #            "new_product_id": 3,
    #            "previous_product_id": 2
    #        },
    #        "created_at": "2012-01-30T10:43:31-05:00"
    #    }
    #}
    #```
    #
    #Here’s an example event for the `subscription_state_change` event:
    #
    #```
    # {
    #     "event": {
    #         "id": 353,
    #         "key": "subscription_state_change",
    #         "message": "State changed on Marky Mark's subscription to Pro from trialing to active",
    #         "subscription_id": 205,
    #         "event_specific_data": {
    #             "new_subscription_state": "active",
    #             "previous_subscription_state": "trialing"
    #         },
    #         "created_at": "2012-01-30T10:43:33-05:00"
    #     }
    # }
    #```
    def test_list_events_2(self):
        # Parameters for the API call
        page = 1
        per_page = 20
        since_id = None
        max_id = None
        direction = 'desc'
        filter = APIHelper.json_deserialize('["custom_field_value_change","payment_success"]')
        date_field = 'created_at'
        start_date = None
        end_date = None
        start_datetime = None
        end_datetime = None

        # Perform the API call through the SDK function
        result = self.controller.list_events(page, per_page, since_id, max_id, direction, filter, date_field, start_date, end_date, start_datetime, end_datetime)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'multipart/form-data'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # Get a count of all the events for a given site by using this method.
    def test_read_events_count(self):
        # Parameters for the API call
        page = 1
        per_page = 20
        since_id = None
        max_id = None
        direction = 'desc'
        filter = APIHelper.json_deserialize('["custom_field_value_change","payment_success"]')

        # Perform the API call through the SDK function
        result = self.controller.read_events_count(page, per_page, since_id, max_id, direction, filter)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"count":144}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

