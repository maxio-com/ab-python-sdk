# -*- coding: utf-8 -*-

"""
maxioadvancedbillingformerlychargifyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from maxioadvancedbillingformerlychargifyapi.api_helper import APIHelper
from maxioadvancedbillingformerlychargifyapi.models.create_offer_request import CreateOfferRequest


class OffersControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(OffersControllerTests, cls).setUpClass()
        cls.controller = cls.client.offers
        cls.response_catcher = cls.controller.http_call_back

    # Create an offer within your Chargify site by sending a POST request.
    #
    ### Documentation
    #
    #Offers allow you to package complicated combinations of products, components and coupons into a convenient package which can then be subscribed to just like products.
    #
    #Once an offer is defined it can be used as an alternative to the product when creating subscriptions.
    #
    #Full documentation on how to use offers in the Chargify UI can be located [here](https://chargify.zendesk.com/hc/en-us/articles/4407753852059).
    #
    ### Using a Product Price Point
    #
    #You can optionally pass in a `product_price_point_id` that corresponds with the `product_id` and the offer will use that price point. If a `product_price_point_id` is not passed in, the product's default price point will be used.
    def test_create_offer(self):
        # Parameters for the API call
        body = APIHelper.json_deserialize('{"offer":{"name":"Solo","handle":"han_shot_first","description":"A'
            ' Star Wars Story","product_id":31,"product_price_point_id":102,"co'
            'mponents":[{"component_id":24,"starting_quantity":1}],"coupons":["'
            'DEF456"]}}', CreateOfferRequest.from_dictionary)

        # Perform the API call through the SDK function
        result = self.controller.create_offer(body)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"offer":{"id":3,"site_id":2,"product_family_id":4,"product_family'
            '_name":"Chargify","product_id":31,"product_name":"30-Day Square Tr'
            'ial","product_price_in_cents":2000,"product_revisable_number":0,"n'
            'ame":"Solo","handle":"han_shot_first","description":"A Star Wars S'
            'tory","created_at":"2018-06-08T14:51:52-04:00","updated_at":"2018-'
            '06-08T14:51:52-04:00","archived_at":null,"product_price_point_name'
            '":"Default","offer_items":[{"component_id":24,"component_name":"In'
            'voices","component_unit_price":"3.0","price_point_id":104,"price_p'
            'oint_name":"Original","starting_quantity":"1.0","editable":false}]'
            ',"offer_discounts":[{"coupon_id":3,"coupon_code":"DEF456","coupon_'
            'name":"IB Loyalty"}]}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This endpoint will list offers for a site.
    def test_list_offers(self):

        # Perform the API call through the SDK function
        result = self.controller.list_offers()

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"offers":[{"id":239,"site_id":48110,"product_family_id":1025627,"'
            'product_family_name":"Gold","product_id":110,"product_name":"Pro",'
            '"product_price_in_cents":1000,"product_revisable_number":0,"produc'
            't_price_point_id":138,"product_price_point_name":"Default","name":'
            '"Third Offer","handle":"third","description":"","created_at":"2018'
            '-08-03T09:56:11-05:00","updated_at":"2018-08-03T09:56:11-05:00","a'
            'rchived_at":null,"offer_items":[{"component_id":426665,"component_'
            'name":"Database Size (GB)","component_unit_price":"1.0","price_poi'
            'nt_id":149438,"price_point_name":"Auto-created","starting_quantity'
            '":"0.0","editable":false,"currency_prices":[]}],"offer_discounts":'
            '[{"coupon_id":234,"coupon_code":"GR8_CUSTOMER","coupon_name":"Mult'
            'i-service Discount"}],"offer_signup_pages":[{"id":356482,"nickname'
            '":"ggoods","enabled":true,"return_url":"","return_params":"","url"'
            ':"https://general-goods.chargifypay.com/subscribe/hjpvhnw63tzy"}]}'
            ']}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

