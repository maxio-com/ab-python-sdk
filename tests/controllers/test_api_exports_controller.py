# -*- coding: utf-8 -*-

"""
maxioadvancedbillingformerlychargifyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from maxioadvancedbillingformerlychargifyapi.api_helper import APIHelper


class APIExportsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(APIExportsControllerTests, cls).setUpClass()
        cls.controller = cls.client.api_exports
        cls.response_catcher = cls.controller.http_call_back

    # This API creates a proforma invoices export and returns a batchjob object.
    #
    #It is only available for Relationship Invoicing architecture.
    def test_export_proforma_invoices(self):

        # Perform the API call through the SDK function
        result = self.controller.export_proforma_invoices()

        # Test response code
        assert self.response_catcher.response.status_code == 201

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # This API creates an invoices export and returns a batchjob object.
    def test_export_invoices(self):

        # Perform the API call through the SDK function
        result = self.controller.export_invoices()

        # Test response code
        assert self.response_catcher.response.status_code == 201

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


    # This API creates a subscriptions export and returns a batchjob object.
    def test_export_subscriptions(self):

        # Perform the API call through the SDK function
        result = self.controller.export_subscriptions()

        # Test response code
        assert self.response_catcher.response.status_code == 201

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


