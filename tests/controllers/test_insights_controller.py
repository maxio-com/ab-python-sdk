# -*- coding: utf-8 -*-

"""
maxioadvancedbillingformerlychargifyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""

import json
import dateutil.parser

from tests.controllers.controller_test_base import ControllerTestBase
from apimatic_core.utilities.comparison_helper import ComparisonHelper
from maxioadvancedbillingformerlychargifyapi.utilities.union_type_lookup import UnionTypeLookUp
from maxioadvancedbillingformerlychargifyapi.api_helper import APIHelper


class InsightsControllerTests(ControllerTestBase):

    @classmethod
    def setUpClass(cls):
        super(InsightsControllerTests, cls).setUpClass()
        cls.controller = cls.client.insights
        cls.response_catcher = cls.controller.http_call_back

    # The Stats API is a very basic view of some Site-level stats. This API call only answers with JSON responses. An XML version is not provided.
    #
    ### Stats Documentation
    #
    #There currently is not a complimentary matching set of documentation that compliments this endpoint. However, each Site's dashboard will reflect the summary of information provided in the Stats reposnse.
    #
    #```
    #https://subdomain.chargify.com/dashboard
    #```
    def test_read_site_stats(self):

        # Perform the API call through the SDK function
        result = self.controller.read_site_stats()

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"seller_name":"Acme, Inc.","site_name":"Production","site_id":123'
            '45,"site_currency":"USD","stats":{"total_subscriptions":120,"subsc'
            'riptions_today":4,"total_revenue":"$45,978.81","revenue_today":"$1'
            ',405.12","revenue_this_month":"$10,000.00","revenue_this_year":"$2'
            '7,935.24"}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This endpoint returns your site's current MRR, including plan and usage breakouts.
    def test_read_mrr(self):
        # Parameters for the API call
        at_time = None
        subscription_id = None

        # Perform the API call through the SDK function
        result = self.controller.read_mrr(at_time, subscription_id)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"mrr":{"amount_in_cents":9915593,"amount_formatted":"$99,155.93",'
            '"currency":"USD","currency_symbol":"$","at_time":"2021-02-03T14:23'
            ':17-05:00","breakouts":{"plan_amount_in_cents":9913593,"plan_amoun'
            't_formatted":"$99,135.93","usage_amount_in_cents":2000,"usage_amou'
            'nt_formatted":"$20.00"}}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This endpoint returns your site's MRR movements.
    #
    ### Understanding MRR movements
    #
    #This endpoint will aid in accessing your site's [MRR Report](https://chargify.zendesk.com/hc/en-us/articles/4407838249627) data.
    #
    #Whenever a subscription event occurs that causes your site's MRR to change (such as a signup or upgrade), we record an MRR movement. These records are accessible via the MRR Movements endpoint.
    #
    #Each MRR Movement belongs to a subscription and contains a timestamp, category, and an amount. `line_items` represent the subscription's product configuration at the time of the movement.
    #
    #### Plan & Usage Breakouts
    #
    #In the MRR Report UI, we support a setting to [include or exclude](https://chargify.zendesk.com/hc/en-us/articles/4407838249627#displaying-component-based-metered-usage-in-mrr) usage revenue. In the MRR APIs, responses include `plan` and `usage` breakouts.
    #
    #Plan includes revenue from:
    #* Products
    #* Quantity-Based Components
    #* On/Off Components
    #
    #Usage includes revenue from:
    #* Metered Components
    #* Prepaid Usage Components
    def test_read_mrr_movements(self):
        # Parameters for the API call
        subscription_id = None
        page = 1
        per_page = 10
        direction = None

        # Perform the API call through the SDK function
        result = self.controller.read_mrr_movements(subscription_id, page, per_page, direction)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)

        
        # Test whether the captured response is as we expected
        assert result is not None
        expected_body = APIHelper.json_deserialize('{"mrr":{"page":0,"per_page":10,"total_pages":80,"total_entries":79'
            '1,"currency":"USD","currency_symbol":"$","movements":[{"timestamp"'
            ':"2014-12-03T13:59:46-05:00","amount_in_cents":2173,"amount_format'
            'ted":"$21.73","description":"Awesome Company signed up for Super P'
            'roduct ($21.73/mo)","category":"new_business","breakouts":{"plan_a'
            'mount_in_cents":2173,"plan_amount_formatted":"$21.73","usage_amoun'
            't_in_cents":0,"usage_amount_formatted":"$0.00"},"line_items":[{"pr'
            'oduct_id":306386,"component_id":0,"price_point_id":3856987,"name":'
            '"string","mrr":2173,"mrr_movements":[{"amount":2173,"category":"ne'
            'w_business"}],"quantity":1,"prev_quantity":0,"recurring":true}],"s'
            'ubscription_id":12355,"subscriber_name":"Amy Smith"}]}}')
        received_body = APIHelper.json_deserialize(self.response_catcher.response.text)
        assert ComparisonHelper.match_body(expected_body, received_body)

    # This endpoint returns your site's current MRR, including plan and usage breakouts split per subscription.
    def test_list_mrr_per_subscription(self):
        # Parameters for the API call
        filter_subscription_ids = APIHelper.json_deserialize('[1,2,3]')
        at_time = 'at_time=2022-01-10T10:00:00-05:00'
        page = 1
        per_page = 20
        direction = 'desc'

        # Perform the API call through the SDK function
        result = self.controller.list_mrr_per_subscription(filter_subscription_ids, at_time, page, per_page, direction)

        # Test response code
        assert self.response_catcher.response.status_code == 200

        # Test headers
        expected_headers = {}
        expected_headers['content-type'] = 'application/json'

        assert ComparisonHelper.match_headers(expected_headers, self.response_catcher.response.headers)


