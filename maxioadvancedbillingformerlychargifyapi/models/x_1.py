# -*- coding: utf-8 -*-

"""
maxioadvancedbillingformerlychargifyapi

This file was automatically generated by APIMATIC v3.0 (
 https://www.apimatic.io ).
"""
from maxioadvancedbillingformerlychargifyapi.api_helper import APIHelper


class X1(object):

    """Implementation of the 'X1' model.

    An attribute 'x' would be changed for a number (an index in request array)
    where the error occured.
    In this object, the key represents the field and the value is an array
    with error messages. In most cases this object would contain just one
    key.

    Attributes:
        base (List[str]): TODO: type description here.
        pricing_scheme (List[str]): TODO: type description here.
        prices (List[str]): TODO: type description here.

    """

    # Create a mapping from Model property names to API property names
    _names = {
        "base": 'base',
        "pricing_scheme": 'pricing_scheme',
        "prices": 'prices'
    }

    _optionals = [
        'base',
        'pricing_scheme',
        'prices',
    ]

    def __init__(self,
                 base=APIHelper.SKIP,
                 pricing_scheme=APIHelper.SKIP,
                 prices=APIHelper.SKIP):
        """Constructor for the X1 class"""

        # Initialize members of the class
        if base is not APIHelper.SKIP:
            self.base = base 
        if pricing_scheme is not APIHelper.SKIP:
            self.pricing_scheme = pricing_scheme 
        if prices is not APIHelper.SKIP:
            self.prices = prices 

    @classmethod
    def from_dictionary(cls,
                        dictionary):
        """Creates an instance of this model from a dictionary

        Args:
            dictionary (dictionary): A dictionary representation of the object
            as obtained from the deserialization of the server's response. The
            keys MUST match property names in the API description.

        Returns:
            object: An instance of this structure class.

        """
        if dictionary is None:
            return None

        # Extract variables from the dictionary
        base = dictionary.get("base") if dictionary.get("base") else APIHelper.SKIP
        pricing_scheme = dictionary.get("pricing_scheme") if dictionary.get("pricing_scheme") else APIHelper.SKIP
        prices = dictionary.get("prices") if dictionary.get("prices") else APIHelper.SKIP
        # Return an object of this model
        return cls(base,
                   pricing_scheme,
                   prices)
